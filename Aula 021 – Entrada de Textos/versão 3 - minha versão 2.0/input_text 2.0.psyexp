<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.2">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participante'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participante': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="False" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="norm" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[900, 600]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[-1.000,-1.000,-1.000]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="input_text" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <TextComponent name="word">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="word" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$stim" valType="extendedStr"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.8" valType="code"/>
      </TextComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="extendedStr"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.8" valType="code"/>
      </TextComponent>
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="buttons = {'tab':'','capslock':'', 'comma': ',', 'semicolon': ';', 'period': '.', 'slash': '/', 'bracketleft': '[', 'bracketright': ']', 'apostrophe': '´', 'equal': '=', 'minus': '–', 'up':'', 'left':'', 'right':'', 'down':'', 'delete':'', 'end':'', 'pagedown':'', 'scrolllock':'', 'pause':'','insert':'','home':'','pageup':'','ctrl':'','windows':'','lctrl':'','numlock':'','num_add':'+','num_subtract':'–','num_multiply':'×','num_divide':'/','f1':'','f2':'','f3':'','f4':'','f5':'','f6':'','f7':'','f8':'','f9':'','f10':'','f11':'','f12':'', 'escape': '', 'num_0': '0', 'num_1':'1', 'num_2':'2', 'num_3':'3', 'num_4':'4', 'num_5':'5', 'num_6':'6', 'num_7':'7', 'num_8':'8', 'num_9':'9'}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="buttons = {&quot;tab&quot;: &quot;&quot;, &quot;capslock&quot;: &quot;&quot;, &quot;comma&quot;: &quot;,&quot;, &quot;semicolon&quot;: &quot;;&quot;, &quot;period&quot;: &quot;.&quot;, &quot;slash&quot;: &quot;/&quot;, &quot;bracketleft&quot;: &quot;[&quot;, &quot;bracketright&quot;: &quot;]&quot;, &quot;apostrophe&quot;: &quot;\u00b4&quot;, &quot;equal&quot;: &quot;=&quot;, &quot;minus&quot;: &quot;\u2013&quot;, &quot;up&quot;: &quot;&quot;, &quot;left&quot;: &quot;&quot;, &quot;right&quot;: &quot;&quot;, &quot;down&quot;: &quot;&quot;, &quot;delete&quot;: &quot;&quot;, &quot;end&quot;: &quot;&quot;, &quot;pagedown&quot;: &quot;&quot;, &quot;scrolllock&quot;: &quot;&quot;, &quot;pause&quot;: &quot;&quot;, &quot;insert&quot;: &quot;&quot;, &quot;home&quot;: &quot;&quot;, &quot;pageup&quot;: &quot;&quot;, &quot;ctrl&quot;: &quot;&quot;, &quot;windows&quot;: &quot;&quot;, &quot;lctrl&quot;: &quot;&quot;, &quot;numlock&quot;: &quot;&quot;, &quot;num_add&quot;: &quot;+&quot;, &quot;num_subtract&quot;: &quot;\u2013&quot;, &quot;num_multiply&quot;: &quot;\u00d7&quot;, &quot;num_divide&quot;: &quot;/&quot;, &quot;f1&quot;: &quot;&quot;, &quot;f2&quot;: &quot;&quot;, &quot;f3&quot;: &quot;&quot;, &quot;f4&quot;: &quot;&quot;, &quot;f5&quot;: &quot;&quot;, &quot;f6&quot;: &quot;&quot;, &quot;f7&quot;: &quot;&quot;, &quot;f8&quot;: &quot;&quot;, &quot;f9&quot;: &quot;&quot;, &quot;f10&quot;: &quot;&quot;, &quot;f11&quot;: &quot;&quot;, &quot;f12&quot;: &quot;&quot;, &quot;escape&quot;: &quot;&quot;, &quot;num_0&quot;: &quot;0&quot;, &quot;num_1&quot;: &quot;1&quot;, &quot;num_2&quot;: &quot;2&quot;, &quot;num_3&quot;: &quot;3&quot;, &quot;num_4&quot;: &quot;4&quot;, &quot;num_5&quot;: &quot;5&quot;, &quot;num_6&quot;: &quot;6&quot;, &quot;num_7&quot;: &quot;7&quot;, &quot;num_8&quot;: &quot;8&quot;, &quot;num_9&quot;: &quot;9&quot;};&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text.text = ''&amp;#10;event.clearEvents('keyboard')&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;&amp;#10;if len(keys):&amp;#10;    if keys[0] in buttons:&amp;#10;        # se a tecla pressionada, keys[0], estiver no dicionário buttons&amp;#10;        # concatene text.text com o valor associado à chave de mesmo nome ao da tecla pressionada&amp;#10;        text.text = text.text + buttons[keys[0]]&amp;#10;    elif 'space' in keys:&amp;#10;        # se a tecla pressiona é [BARRA DE ESPAÇO]&amp;#10;        # concatene um espaço ao final de text.text&amp;#10;        text.text = text.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        # se a tecla pressionada é [← BACKSPACE] (apagar)&amp;#10;        # exclua o último caractere de text.text&amp;#10;        text.text = text.text[:-1]&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        # se a tecla pressiona for [SHIFT], quer da esquerda ou da direita do teclado&amp;#10;        # modify se torna Verdadeiro&amp;#10;        modify = True&amp;#10;    elif len(text.text) &lt; 3 and 'return' in keys:&amp;#10;        # se text.text tem menos que 3 caracteres e a tecla [ENTER] é pressionada&amp;#10;        # não faça nada...&amp;#10;        text.text = text.text&amp;#10;    elif len(text.text) &gt;= 3 and 'return' in keys:&amp;#10;        # se text.text tem pelo menos 3 caracteres e a tecla [ENTER] é pressionada&amp;#10;        # encerre a rotina na iteração atual do loop&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            # se modify é Verdadeiro&amp;#10;            # concatene text.text com a próxima tecla pressionada, em sua versão maiúscula&amp;#10;            text.text = text.text + keys[0].upper()&amp;#10;            # e volte modify para Falso&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            # caso modify seja Falso&amp;#10;            # concatene text.text com a próxima tecla pressionada, em sua versão minúscula&amp;#10;            text.text = text.text + keys[0]&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(keys[0], buttons)) {&amp;#10;        text.text = (text.text + buttons[keys[0]]);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;            text.text = (text.text + &quot; &quot;);&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;                text.text = text.text.slice(0, (- 1));&amp;#10;            } else {&amp;#10;                if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                    modify = true;&amp;#10;                } else {&amp;#10;                    if (((text.text.length &lt; 3) &amp;&amp; _pj.in_es6(&quot;return&quot;, keys))) {&amp;#10;                        text.text = text.text;&amp;#10;                    } else {&amp;#10;                        if (((text.text.length &gt;= 3) &amp;&amp; _pj.in_es6(&quot;return&quot;, keys))) {&amp;#10;                            continueRoutine = false;&amp;#10;                        } else {&amp;#10;                            if (modify) {&amp;#10;                                text.text = (text.text + keys[0].upper());&amp;#10;                                modify = false;&amp;#10;                            } else {&amp;#10;                                text.text = (text.text + keys[0]);&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text.text);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text.text)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="line">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="line" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="line" valType="str"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
      </PolygonComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('stim', 'banana')]), OrderedDict([('stim', 'cachorro')]), OrderedDict([('stim', 'sorvete')]), OrderedDict([('stim', 'brasil')]), OrderedDict([('stim', 'danone')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="stimuli.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
